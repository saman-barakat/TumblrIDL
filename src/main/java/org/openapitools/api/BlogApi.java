/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-12T14:59:54.285327700+01:00[Europe/Berlin]")
@Validated
@Tag(name = "Blogs", description = "Tumblr Blogs")
public interface BlogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /blog/{blog-identifier}/likes : Retrieve Blog&#39;s Likes
     * This method can be used to retrieve the publicly exposed likes from a blog.
     *
     * @param blogIdentifier Any blog identifier (required)
     * @param limit The number of results to return: 1–20, inclusive (optional, default to 20)
     * @param offset Liked post number to start at (optional, default to 0)
     * @param before Retrieve posts liked before the specified timestamp (optional)
     * @param after Retrieve posts liked after the specified timestamp (optional)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "getBlogLikes",
        summary = "Retrieve Blog's Likes",
        description = "This method can be used to retrieve the publicly exposed likes from a blog.",
        tags = { "Blogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "404", description = "Not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blog/{blog-identifier}/likes"
    )
    default ResponseEntity<Void> getBlogLikes(
        @Parameter(name = "blog-identifier", description = "Any blog identifier", required = true, in = ParameterIn.PATH) @PathVariable("blog-identifier") String blogIdentifier,
        @Parameter(name = "limit", description = "The number of results to return: 1–20, inclusive", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "offset", description = "Liked post number to start at", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "before", description = "Retrieve posts liked before the specified timestamp", in = ParameterIn.QUERY) @Valid @RequestParam(value = "before", required = false) Integer before,
        @Parameter(name = "after", description = "Retrieve posts liked after the specified timestamp", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) Integer after
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
